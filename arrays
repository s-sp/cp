0 sizeof() operator works at compile time

1 int array2D[2][4] = {1,2,3,4,5,6,7,8}; /* (i) */
  int array2D[][4] = {1,2,3,4,5,6,7,8}; /* (ii) */
  int array2D[2][] = {1,2,3,4,5,6,7,8}; /* (iii) */
  int array2D[][] = {1,2,3,4,5,6,7,8}; /* (iv) */
  Only (i) and (ii) are correct.
  
2 [imp] (a + b*n) / n is b (because a<n, a/n is 0) and (a + b*n) % n is a, see Rearrange an array with O(1) extra space.

3 reverse(i, j) will not work if j>n

4 5 methods for array rotation: 0) using aux array; 1) shifting elements 1 by 1, n*d complexity; 
  3 methods with O(n) time, constant space: 2) juggling algorithm using gcd; 3) block swap; 4) reversal algorithm

5 [imp] The idea of the reversal algorithm for array rotation is :
  Reverse A to get ArB, where Ar is reverse of A.
  Reverse B to get ArBr, where Br is reverse of B.
  Reverse all to get (ArBr) r = BA.
  
6 The range of long long int is -(2^63) to (2^63)-1. (2^63)-1 is 9.2e+18, 19 digits long. unsigned long long int goes from 0 to 1.8e+19.

7 To make a wave array (a1 >= a2 <= a3 >= a4 <= a5.....) just sort the array and swap adjacent elements.

8 common errors include: i, j mixup; i in place of 1. i looks like 1, have more than once wasted too many minutes because of this.

9 Remember: in dealing with large matrices or arrays, use boolean arrays instead of integer arrays when you can.

10 [imp] hashmap without hashmap (applicable to pure positve number arrays only): arr[arr[i]] = -arr[arr[i]]. see Smallest Positive missing number.

11 hashmap without hashmap whilst dealing with non-positive numbers: rather than writing a linear time segregation function to separate positive numbers from others like everybody and their brother, see what I have done in Smallest Positive missing number.

12 array[negative_number] does not always throw an error.


questions to look at:
0 Remove duplicate elements from sorted Array: its easy to miss the constant space, linear time implementation
1 Find Transition Point: my solution better than ones on the internet
2 Equilibrium Point
3 Subarray with given sum
4 Kadane's Algorithm: obvious really, my solution is better than the one on gfg
5 Smallest Positive missing number: its easy to miss the constant space, linear time implementation
6 Smallest Positive missing number: hashmap without hashmap, similar: Find duplicates in O(n) time and O(1) extra space
7 Rearrange an array with O(1) extra space: (a + b*n) / n is b (because a<n, a/n is 0) and (a + b*n) % n is a
