0 sizeof() operator works at compile time

1 int array2D[2][4] = {1,2,3,4,5,6,7,8}; /* (i) */
  int array2D[][4] = {1,2,3,4,5,6,7,8}; /* (ii) */
  int array2D[2][] = {1,2,3,4,5,6,7,8}; /* (iii) */
  int array2D[][] = {1,2,3,4,5,6,7,8}; /* (iv) */
  Only (i) and (ii) are correct.
  
2 [silly] remember you can often use an auxillary array and copy its contents to your main array

3 reverse(i, j) will not work if j>n

4 5 methods for array rotation: 0) using aux array; 1) shifting elements 1 by 1, n*d complexity; 
  3 methods with O(n) time, constant space: 2) juggling algorithm using gcd; 3) block swap; 4) reversal algorithm

5 The idea of the reversal algorithm for array rotation is :
  Reverse A to get ArB, where Ar is reverse of A.
  Reverse B to get ArBr, where Br is reverse of B.
  Reverse all to get (ArBr) r = BA.
  
6 The range of long long int is -(2^63) to (2^63)-1. (2^63)-1 is 9.2e+18, 19 digits long. unsigned long long int is from 0 to 1.8e+19.

7 To make a wave array (a1 >= a2 <= a3 >= a4 <= a5.....) just sort the array and swap adjacent elements.

8 [silly] common compilation errors include: i, j mixup; i in place of 1

9 Remember: in dealing with large matrices or arrays, use boolean arrays instead of integer arrays when you can.





questions to look at:
0 Remove duplicate elements from sorted Array: its easy to miss the constant space, linear time implementation
1 Find Transition Point: my solution better than ones on the internet
2 Equilibrium Point: try it, its easy
3 Subarray with given sum: easy, important
4 
